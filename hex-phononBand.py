'''
Created on 2017/11/09
generate phonon band plot after split phonon job
@author: Emi Minamitani
'''
import os
import numpy as np
import argparse
import glob
import shutil
import re

if __name__ == '__main__':
    parser=argparse.ArgumentParser(description='phonon input ', fromfile_prefix_chars='@')
    parser.add_argument('--workingDir', metavar='root directory for inputs generated by phononSplit.py', default='./',action='store')
    parser.add_argument('--prefix', metavar='prefix for QE calculation', type=str,action='store')
    parser.add_argument('--scfin', metavar='scf input including latice parameter info', action='store')
    parser.add_argument('--mesh', metavar='mesh point in one path', type=int, default=30, action="store")
    
    args=parser.parse_args() 
    ROOT="/home/emi/espresso/install-test/qe-6.2/bin"
    
    os.chdir(args.workingDir)
    try:
        os.mkdir('phononBand')
    except OSError:
        print('directory already exist')
    
    
    fdir=open('directoryList.txt',"r")
    
    lines=fdir.readlines()
    os.system('cp '+args.scfin+"  ./phononBand/")
    
    print(lines)
    
    for i in lines:
        os.chdir(i.strip('\n'))
        
        start_q=0
        last_q=0
        
        fin=open(args.prefix+".phonon.in")
        inputLines=fin.readlines()
       
        
        for line in inputLines:
            if (line.find("start_q")>=0):
                start_q=int(line.strip("").strip("\n").split("=")[1])
            if (line.find("last_q")>=0):
                last_q=int(line.strip("").strip("\n").split("=")[1])
        
        
        print(start_q)
        print(last_q)
        
        #copy dyn file
        
        #copy dyn0
        if (start_q==1):
            os.system('cp ' +args.prefix+'.dyn0' + ' ../phononBand/')
        qpts=np.arange(start_q, last_q+1)
        for i in qpts:
            os.system('cp ' +args.prefix+'.dyn'+str(i) + ' ../phononBand/')
        
        os.chdir('../')
    
    #make q2r.x input
    os.chdir("phononBand")
    q2r=open("q2r.in", "w")
    q2r.write("&input \n")
    q2r.write("zasr=\'simple\' \n")
    q2r.write("fildyn=\'"+args.prefix+".dyn\' \n")
    q2r.write("flfrc=\'"+args.prefix+".fc\' \n")
    q2r.write("/")
    q2r.close()
    
    os.system(ROOT+'/q2r.x < q2r.in')
    
    #make phonon band input
    
    #hex phononBand path Gamma--> M --> K --> Gamma --> A --> L --> H-->A
    hexPoint=[]
    hexPoint.append([0.0,0.0,0.0]) #Gamma
    hexPoint.append([0.0,0.5,0.0]) #M
    hexPoint.append([0.33333333,0.33333333,0.0]) #K
    hexPoint.append([0.0,0.0,0.0]) #Gamma
    hexPoint.append([0.0,0.0,0.5]) #A
    hexPoint.append([0.0,0.5,0.5]) #L
    hexPoint.append([0.33333333,0.33333333,0.5]) #H
    hexPoint.append([0.0,0.0,0.5]) #A
    
    #read lattice information from scf input
    scfin=open(args.scfin, "r")
    lines=scfin.readlines()
    scfin.close()
    
    pattern3=r".*celldm\(.*3.*\).*"
    caratio=0.0
    for i in lines:
        if(re.match(pattern3,i)):
            caratio=float(i.split("=")[-1])
            print("ca ratio="+str(caratio))
    
    vec1=np.array([1.0,0.0,0.0])
    vec2=np.array([-0.5,0.866025404,0.0])
    vec3=np.array([0.0,0.0,caratio])    
    
    kvec1=np.cross(vec2,vec3)/(np.dot(vec1,np.cross(vec2,vec3)))
    kvec2=np.cross(vec3,vec1)/(np.dot(vec1,np.cross(vec2,vec3)))
    kvec3=np.cross(vec1,vec2)/(np.dot(vec1,np.cross(vec2,vec3)))

    pathpoints=[]    
    
    for i in range(len(hexPoint)-1):
        diff1=hexPoint[i+1][0]-hexPoint[i][0]
        diff2=hexPoint[i+1][1]-hexPoint[i][1]
        diff3=hexPoint[i+1][2]-hexPoint[i][2]
        
        mesh1=diff1/float(args.mesh-1)
        mesh2=diff2/float(args.mesh-1)
        mesh3=diff3/float(args.mesh-1)
        
        for j in range(args.mesh):
            coord1=hexPoint[i][0]+mesh1*float(j)
            coord2=hexPoint[i][1]+mesh2*float(j)
            coord3=hexPoint[i][2]+mesh3*float(j)
            
            coord=kvec1*coord1+kvec2*coord2+kvec3*coord3
            if j!=range(args.mesh)[args.mesh-1]:
                pathpoints.append(coord)
            else:
                if i==(len(hexPoint)-2):
                    pathpoints.append(coord)
    
    
    matdyn=open("matdyn.in.freq", "w")
    matdyn.write("&input \n")
    matdyn.write("asr=\'simple\' \n")
    matdyn.write("flfrc=\'GaN.fc\' \n")
    matdyn.write("flfrq=\'GaN.freq\' \n")
    matdyn.write("dos=.false. \n")
    matdyn.write("/ \n")
    matdyn.write(str(len(pathpoints))+"\n")
    for i in pathpoints:
        matdyn.write(str(i[0]) + "   "+str(i[1]) + "  " +str(i[2]) +"  0.0000 \n")
    
    matdyn.close()
    
    os.system(ROOT+'/matdyn.x < matdyn.in.freq')
    
    #for gnuplot version of band plotting
    
    #list of index for high symetric point
    datafile=open("GaN.freq.gp","r")
    data=datafile.readlines()
    datafile.close()
    
    kcoord=[]
    for i in data:
        tmp=i.split()
        kcoord.append(float(tmp[0]))
    
    #print(kcoord)
    highsym=[]
    highsym.append(1)
    for i in range(1,len(hexPoint)):
        highsym.append((args.mesh-1)*i+1)
    
    sympoints=[]
    for i in highsym:
        sympoints.append(kcoord[i-1])
        
    ymin=0.0
    ymax=100.0
    maxk=kcoord[len(kcoord)-1]
    
    gp=open("gnuplot.plt", "w")
    gp.write("set term postscript eps enhanced color \"Arial\" 25 \n")
    gp.write("set output \"compare.eps\" \n")
    gp.write("set style data dots \n")
    gp.write("set key below \n")
    gp.write("ymin= "+ str(ymin) +"\n")
    gp.write("ymax= "+ str(ymax) +"\n")
    gp.write("set xrange [0.0: "+str(maxk) +" ] \n")
    gp.write("set yrange [ymin : ymax ] \n")
    
    for i in sympoints:
        gp.write("set arrow from "+ str(i) + " , " + "ymin" + " to " + str(i) +" , ymax  nohead \n")
    
    gp.write("set xtics (\" G \" "+str(sympoints[0]) + ",\" M \" "+ str(sympoints[1]) + \
             ",\" K \" "+  str(sympoints[2]) + ",\" G \" " +  str(sympoints[3]) + \
            ",\" A \" "+  str(sympoints[4]) + ",\" L \" "+  str(sympoints[5]) + \
            ",\" H \" "+  str(sympoints[6]) +",\" A \" " + str(sympoints[7])+ ") \n")
    
    gp.write("plot \"GaN.freq.gp\" using 1:($2)*0.12398  noti  w l lw 2 lt 1, \\\n")
    
    for i in range(3,13):
        gp.write("\"GaN.freq.gp\" using 1:($"+str(i)+")*0.12398  noti  w l lw 2 lt 1, \\\n")
    
    gp.write("\"GaN.freq.gp\" using 1:($13)*0.12398  noti  w l lw 2 lt 1 \n")
    
    gp.close()
        
    
    
        
        
    
    
    

    

    
    
    
    